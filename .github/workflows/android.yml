name: Android CI with Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Restore Gradle Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"
          cache: gradle

      - name: Create app directory for keystore
        run: mkdir -p app

      - name: Restore Keystore
        run: |
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > app/upload-keystore.jks

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build signed APK with Gradle
        env:
          VERSION_CODE: ${{ github.run_number }}
          VERSION_NAME: "0.0.${{ github.run_number }}"
        run: ./gradlew build -Pandroid.injected.signing.store.file=app/upload-keystore.jks -Pandroid.injected.signing.store.password=${{ secrets.KEYSTORE_PASSWORD }} -Pandroid.injected.signing.key.alias=${{ secrets.KEY_ALIAS }} -Pandroid.injected.signing.key.password=${{ secrets.KEY_PASSWORD }}

      - name: List APK files
        run: |
          echo "APK files found:"
          find app/build/outputs/apk/ -iname "*.apk" -exec ls -lh {} \;

      - name: Rename APK
        run: |
          APK_DIR=app/build/outputs/apk/release
          mv "$APK_DIR/app-release.apk" "$APK_DIR/Launchbox-0.0.${{ github.run_number }}.apk"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.version.outputs.filename }}
          path: "app/build/outputs/apk/release/Launchbox-0.0.${{ github.run_number }}.apk"

      - name: Get Changelog
        id: changelog
        shell: bash
        run: |
          changelog="- Initial release"
          if git tag --list | grep .; then
            last_tag=$(git describe --tags --abbrev=0)
            echo "Last tag found: $last_tag"
            changelog=$(git log --pretty=format:'- %s' "$last_tag"..HEAD)
          else
            echo "No tags found â€” using fallback changelog"
          fi
          printf "changelog<<EOF\n%s\nEOF\n" "$changelog" >> "$GITHUB_ENV"

      - name: Create GitHub Release and Upload APK
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: Release ${{ env.VERSION }}
          body: |
            ${{ github.event.head_commit.message }}
            ## Changelog
            ${{ env.changelog }}
          files: app/build/outputs/apk/release/app-release.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
